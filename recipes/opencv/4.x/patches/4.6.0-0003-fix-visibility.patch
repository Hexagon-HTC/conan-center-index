diff --git a/modules/core/include/opencv2/core/cvdef.h b/modules/core/include/opencv2/core/cvdef.h
index f785f32b6e..dbedfb8ec1 100644
--- a/modules/core/include/opencv2/core/cvdef.h
+++ b/modules/core/include/opencv2/core/cvdef.h
@@ -406,7 +406,7 @@ Cv64suf;
 #ifndef CV_EXPORTS
 # if (defined _WIN32 || defined WINCE || defined __CYGWIN__) && defined(CVAPI_EXPORTS)
 #   define CV_EXPORTS __declspec(dllexport)
-# elif defined __GNUC__ && __GNUC__ >= 4 && (defined(CVAPI_EXPORTS) || defined(__APPLE__))
+# elif defined __GNUC__ && __GNUC__ >= 4 && defined(CVAPI_EXPORTS)
 #   define CV_EXPORTS __attribute__ ((visibility ("default")))
 # endif
 #endif
diff --git a/modules/flann/include/opencv2/flann/any.h b/modules/flann/include/opencv2/flann/any.h
index 4906fec081..fdaad44dd6 100644
--- a/modules/flann/include/opencv2/flann/any.h
+++ b/modules/flann/include/opencv2/flann/any.h
@@ -18,6 +18,7 @@
 #include <stdexcept>
 #include <ostream>
 #include <typeinfo>
+#include <typeindex>
 
 namespace cvflann
 {
@@ -271,7 +272,8 @@ public:
     template<typename T>
     T& cast()
     {
-        if (policy->type() != typeid(T)) throw anyimpl::bad_any_cast();
+        static std::type_index rhsType(typeid(T)); 
+        if (std::type_index{policy->type()} != rhsType) throw anyimpl::bad_any_cast();
         T* r = reinterpret_cast<T*>(policy->get_value(&object));
         return *r;
     }
@@ -280,7 +282,8 @@ public:
     template<typename T>
     const T& cast() const
     {
-        if (policy->type() != typeid(T)) throw anyimpl::bad_any_cast();
+        static std::type_index rhsType(typeid(T)); 
+        if (std::type_index{policy->type()} != rhsType) throw anyimpl::bad_any_cast();
         const T* r = reinterpret_cast<const T*>(policy->get_value(&object));
         return *r;
     }
